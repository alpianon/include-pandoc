#!/usr/bin/env python
#
#SPDX-License-Identifier: GPL-3.0-only
#
# Copyright (C) 2019 Alberto Pianon <pianon@array.eu>
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, version 3.
# 
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along with
# this program. If not, see <https://www.gnu.org/licenses/>.


import sys, argparse, os

from subprocess import Popen, PIPE

from include_pandoc.createaddargs import whereami, create_addargs
from include_pandoc.process_includes import process_file

# https://stackoverflow.com/a/14591302
import sys as _sys
class MyParser(argparse.ArgumentParser):
    def error(self, message):    
        usage = self.usage
        self.usage = None
        self.print_usage(_sys.stderr)
        self.exit(2, '%s: ERROR: %s\n' % (self.prog, message))
        self.usage = usage

if "--update" in sys.argv:
    if not os.access(whereami(), os.W_OK):
        sys.stderr.write(
            'Cannot write to %s:\n'
            'maybe you need to run "%s --update" with sudo / as root.\n\n' %
            (whereami(), os.path.basename(sys.argv[0]))
        )
        sys.exit(1)
    sys.stdout.write("updating pandoc wrapper... ")
    create_addargs()
    sys.stdout.write("DONE!\n\n")
    sys.exit(0)

try:
    from include_pandoc.addargs import addargs_pandoc_version, add_args
except ImportError:
    sys.stderr.write(
        'ERROR: Wrapper not initialized!\n'
        'Please run "%s --update"\n'
        '(with sudo / as root if you did not install %s as user)\n\n' %
        (sys.argv[0], sys.argv[0])
    )
    sys.exit(1)    

p = Popen(['pandoc', '-v'], stdout=PIPE)
v = p.communicate()[0]
version = " ".join(v.splitlines()[:2])
if version != addargs_pandoc_version():
    sys.stderr.write(
        'ERROR: pandoc version mismatch\n'
        'Please run %s --update\n'
        '(with sudo / as root if you did not install %s as user)\n\n' %
        (sys.argv[0], sys.argv[0])
    )
    sys.exit(1)

parser = MyParser(
   description="Wrapper for pandoc with include processing",
   usage=argparse.SUPPRESS
)

parser.add_argument(
    "input_file", metavar="FILE", nargs='*', 
    type=argparse.FileType('r'), default=sys.stdin
)

parser.add_argument(
    '--update', action="store_true", help="update pandoc wrapper"
) # dummy argument, it will never be fired; only for help purposes

add_args(parser)

sys.argv.pop(0)

ns = parser.parse_args(sys.argv)

pandoc_args = []
for key, value in vars(ns).iteritems():
    if value and key != "input_file":
        if type(value) is str:
            value = value.replace("=", ":")
        elif type(value) is list:
            value = value[0].replace("=", ":")
        if value == True:
            pandoc_args.append("--%s" % key)
        else:
            pandoc_args.append('--%s=%s' % (key, value))

input_files = ns.input_file if type(ns.input_file) is list else [ns.input_file]


p = Popen(['pandoc'] + pandoc_args, stdout=PIPE, stdin=PIPE)

if not ns.version:
    try:
        for f in input_files:
            process_file(f, p.stdin, byte=True)
    except KeyboardInterrupt:
        sys.stdout.write('\n')
        sys.exit(0)
sys.stdout.write(p.communicate()[0])
p.stdin.close()
sys.exit(0)


